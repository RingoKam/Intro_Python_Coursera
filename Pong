Classic arcade game Pong

import simplegui
import random
import math

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = False
RIGHT = True
score1 = 0 
score2 = 0
START= False

paddle1_pos1=[3,240]
paddle1_pos2=[3,160]
paddle1_pos=[paddle1_pos1,paddle1_pos2]
paddle2_pos1=[597,240]
paddle2_pos2=[597,160]
paddle2_pos=[paddle2_pos1,paddle2_pos2]

paddle2_vel=0
paddle1_vel=0
ball_pos=[WIDTH/2,HEIGHT/2]
ball_vel=[0,0]

# initialize ball_pos and ball_vel for new bal in middle of table
# if direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball(direction):
    global ball_pos, ball_vel # these are vectors stored as lists
    ball_pos = [WIDTH/2,HEIGHT/2]
#ball_vel is random. the +/- changes direction 
    if direction == RIGHT:
        ball_vel=[(random.randrange(120,240)/60.0),-(random.randrange(60,180)/60.0)]
    if direction == LEFT:
        ball_vel=[-(random.randrange(120,240)/60.0),-(random.randrange(60,180)/60.0)]       
    
# define event handlers
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are numbers
    global score1, score2, START, ball_pos,ball_vel
    # these are ints
    score1 = 0 
    score2 = 0
    if START == False:
        spawn_ball(random.randrange(0,2))
        START = True
    elif START == True:
        ball_pos=[WIDTH/2,HEIGHT/2]
        ball_vel=[0,0]
        START = False

def reset():
    global score1, score2
    spawn_ball(random.randrange(0,2))
    score1 = 0 
    score2 = 0
        
def draw(canvas):
    global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel,paddle1_vel,paddle2_vel
        
    # draw mid line and gutters
    canvas.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    canvas.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    canvas.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
        
    #update ball
    ball_pos[0]+=ball_vel[0]
    ball_pos[1]+=ball_vel[1]
    
    #bounce ball back when hit wall
    if ball_pos[1]<=20:
        ball_vel[1]=-ball_vel[1]
    if ball_pos[1]>=380:
        ball_vel[1]=-ball_vel[1]
    
    # draw ball
    canvas.draw_circle(ball_pos,BALL_RADIUS, 2, "Red","Red")	 
    
    # update paddle's vertical position, keep paddle on the screen
    paddle1_pos1[1]+=paddle1_vel
    paddle1_pos2[1]+=paddle1_vel
    
    paddle2_pos1[1]+=paddle2_vel
    paddle2_pos2[1]+=paddle2_vel
    
    # draw paddles
    canvas.draw_polyline(paddle1_pos,PAD_WIDTH+3,'red')
    canvas.draw_polyline(paddle2_pos,PAD_WIDTH+3,'blue')
   
    # determine whether paddle and ball collide 
    if paddle1_pos1[1]>=400:
        paddle1_vel=0
    if paddle1_pos2[1]<=0:
        paddle1_vel=0
    if paddle2_pos1[1]>=400:
        paddle2_vel=0
    if paddle2_pos2[1]<=0: 
        paddle2_vel=0

    # SCORE condition!
    if ball_pos[0]<=PAD_WIDTH:
        score2+=1
        spawn_ball(RIGHT)
        
    if ball_pos[0]>=WIDTH-PAD_WIDTH:
        score1+=1
        spawn_ball(LEFT)
    
    # ball collidison 
    if paddle1_pos1[0]>=ball_pos[0]-20:
        if paddle1_pos1[1]>ball_pos[1]>paddle1_pos2[1]:
            ball_vel[0]=-ball_vel[0]*1.10
            
    if paddle2_pos1[0]<=ball_pos[0]+20:
        if paddle2_pos1[1]>ball_pos[1]>paddle2_pos2[1]:
            ball_vel[0]=-ball_vel[0]*1.10
            
    # draw scores
    canvas.draw_text(str(score1),[WIDTH/2-30,30],25,'red')
    canvas.draw_text(str(score2),[WIDTH/2+20,30],25,'blue')                
    
def keydown(key):
    global paddle1_vel
    if key == simplegui.KEY_MAP["up"]:
        paddle1_vel=-5
    elif key == simplegui.KEY_MAP["down"]:    
        paddle1_vel=5     
        
    global paddle2_vel, paddle2_vel
    if key == simplegui.KEY_MAP["w"]:
        paddle2_vel=-5
    elif key == simplegui.KEY_MAP["s"]:    
        paddle2_vel=5
        
def keyup(key):
    global paddle1_vel,paddle2_vel
    paddle1_vel=0
    paddle2_vel=0

# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)

button = frame.add_button('Startgame', new_game)
button = frame.add_button('Reset', reset)

# start frame
frame.start()